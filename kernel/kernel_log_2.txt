Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/mod.rs
    Line        : 236
    Column      : 66
    Error       : no viable alternative at input 'for name in names {\n            let Some((id, _scheme)) = self.get_name(from, &name) else'
    Line Content:             let Some((id, _scheme)) = self.get_name(from, &name) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/mod.rs
    Line        : 238
    Column      : 14
    Error       : extraneous input ';' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/mod.rs
    Line        : 249
    Column      : 13
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/mod.rs
    Line        : 363
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/mod.rs
    Line        : 151
    Column      : 44
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
    Line Content:         let Ok(pos) = usize::try_from(pos) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/mod.rs
    Line        : 171
    Column      : 60
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
    Line Content:         let Ok(first_index) = usize::try_from(first_index) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 48
    Column      : 54
    Error       : no viable alternative at input ''contexts: for context in context::contexts().iter().filter_map(|c| c.upgrade()) {\n        let context = context.read();\n        let files = context.files.read();\n        writeln!(report, "'{}' {{", context.name).unwrap();\n\n        for file in files.iter().filter_map(|f| f.clone()) {\n            writeln!(\n                report,\n                "\tS{}W{}",\n                Arc::strong_count(&file.description),\n                Arc::weak_count(&file.description)\n            )\n            .unwrap();\n            let fr = Ref(file.description.clone());\n            let Some(a) = context.addr_space.clone() else'
    Line Content:             let Some(a) = context.addr_space.clone() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 37
    Column      : 50
    Error       : mismatched input '.' expecting ';'
    Line Content:         writeln!(report, "'{}' {{", context.name).unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 46
    Column      : 13
    Error       : mismatched input '.' expecting ';'
    Line Content:             .unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 71
    Column      : 31
    Error       : mismatched input '.' expecting ';'
    Line Content:         writeln!(report, "}}").unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 73
    Column      : 35
    Error       : mismatched input '.' expecting ';'
    Line Content:     writeln!(report, "==========").unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 86
    Column      : 9
    Error       : mismatched input '.' expecting ';'
    Line Content:         .unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 88
    Column      : 35
    Error       : mismatched input '.' expecting ';'
    Line Content:     writeln!(report, "==========").unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/sys/fdstat.rs
    Line        : 95
    Column      : 5
    Error       : mismatched input '.' expecting ';'
    Line Content:     .unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/acpi.rs
    Line        : 202
    Column      : 50
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
    Line Content:         let Ok(offset) = usize::try_from(offset) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/acpi.rs
    Line        : 253
    Column      : 9
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
    Line Content:         else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/root.rs
    Line        : 264
    Column      : 92
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:         let Handle::List { ens } = *self.handles.read().get(&id).ok_or(Error::new(EBADF))? else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/irq.rs
    Line        : 308
    Column      : 59
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
    Line Content:         let Ok(opaque) = usize::try_from(opaque_id_start) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 207
    Column      : 9
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '::', '?', '[', '('}
    Line Content:         else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 215
    Column      : 91
    Error       : no viable alternative at input 'for pid in clones.drain(..) {\n            if ptrace::is_traced(pid) {\n                continue;\n            }\n            let Some(child_process) = process::PROCESSES.read().get(&pid).map(Arc::clone) else'
    Line Content:             let Some(child_process) = process::PROCESSES.read().get(&pid).map(Arc::clone) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 215
    Column      : 13
    Error       : extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             let Some(child_process) = process::PROCESSES.read().get(&pid).map(Arc::clone) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 245
    Column      : 9
    Error       : no viable alternative at input 'for (_, handle) in HANDLES.read().iter() {\n        let Handle::Context {\n            kind: ContextHandle::AddrSpace { addrspace, .. },\n            ..\n        } = handle\n        else'
    Line Content:         else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 593
    Column      : 58
    Error       : no viable alternative at input 'match handle {\n            Handle::Context {\n                context,\n                kind:\n                    ContextHandle::AwaitingAddrSpaceChange {\n                        new,\n                        new_sp,\n                        new_ip,\n                    },\n            } => {\n                let _ = try_stop_context(context, |context: &mut Context| {\n                    let regs = context.regs_mut().ok_or(Error::new(EBADFD))?;\n                    regs.set_instr_pointer(new_ip);\n                    regs.set_stack_pointer(new_sp);\n\n                    Ok(context.set_addr_space(Some(new)))\n                })?;\n                let _ = ptrace::send_event(crate::syscall::ptrace_event!(\n                    PTRACE_EVENT_ADDRSPACE_SWITCH,\n                    0\n                ));\n            }\n            Handle::Context {\n                kind: ContextHandle::AddrSpace { addrspace } | ContextHandle::MmapMinAddr(addrspace),\n                ..\n            } => drop(addrspace),\n\n            Handle::Context {\n                kind: ContextHandle::AwaitingFiletableChange { new_ft },\n                context,\n            } => {\n                context.write().files = new_ft;\n            }\n            Handle::Process {\n                kind: ProcHandle::Trace { pid, excl, .. },\n                process,\n            } => {\n                ptrace::close_session(pid);\n\n                if excl {\n                    syscall::kill(pid, SIGKILL, KillMode::Idempotent)?;\n                }\n\n                let threads = process.read().threads.clone();\n\n                for thread in threads {\n                    let Some(context) = thread.upgrade() else'
    Line Content:                     let Some(context) = thread.upgrade() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 555
    Column      : 22
    Error       : extraneous input ',' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                     },
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 567
    Column      : 18
    Error       : extraneous input ')' expecting ';'
    Line Content:                 ));
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 568
    Column      : 13
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 612
    Column      : 51
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '::', '?', '[', '('}
    Line Content:         let Handle::Context { kind, .. } = handle else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 919
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1135
    Column      : 17
    Error       : no viable alternative at input 'match self {\n            Self::Static { bytes, .. } => read_from(buf, &bytes, offset),\n            Self::Trace { pid, .. } => {\n                // Wait for event\n                if (read_flags as usize) & O_NONBLOCK != O_NONBLOCK {\n                    ptrace::wait(pid)?;\n                }\n\n                // Check if process exists\n                let _ = process::PROCESSES\n                    .read()\n                    .get(&pid)\n                    .ok_or(Error::new(ESRCH))?;\n\n                let mut src_buf = [PtraceEvent::default(); 4];\n\n                // Read events\n                let src_len = src_buf.len();\n                let slice = &mut src_buf\n                    [..core::cmp::min(src_len, buf.len() / mem::size_of::<PtraceEvent>())];\n\n                let (read, reached) = ptrace::Session::with_session(pid, |session| {\n                    let mut data = session.data.lock();\n                    Ok((data.recv_events(slice), data.is_reached()))\n                })?;\n                let mut handles = HANDLES.write();\n                let handle = handles.get_mut(&id).ok_or(Error::new(EBADF))?;\n                let Handle::Process {\n                    kind: ProcHandle::Trace { ref mut clones, .. },\n                    ..\n                } = handle\n                else'
    Line Content:                 else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1105
    Column      : 40
    Error       : extraneous input '=>' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             Self::Static { bytes, .. } => read_from(buf, &bytes, offset),
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1356
    Column      : 72
    Error       : no viable alternative at input 'match self {\n            Self::AddrSpace { addrspace } => {\n                let mut chunks = buf.usizes();\n                let mut words_read = 0;\n                let mut next = || {\n                    words_read += 1;\n                    chunks.next().ok_or(Error::new(EINVAL))\n                };\n\n                match next()?? {\n                    op @ ADDRSPACE_OP_MMAP | op @ ADDRSPACE_OP_TRANSFER => {\n                        let fd = next()??;\n                        let offset = next()??;\n                        let page_span = crate::syscall::validate_region(next()??, next()??)?;\n                        let flags = MapFlags::from_bits(next()??).ok_or(Error::new(EINVAL))?;\n\n                        if !flags.contains(MapFlags::MAP_FIXED) {\n                            return Err(Error::new(EOPNOTSUPP));\n                        }\n\n                        let (scheme, number) = extract_scheme_number(fd)?;\n\n                        scheme.kfmap(\n                            number,\n                            &addrspace,\n                            &Map {\n                                offset,\n                                size: page_span.count * PAGE_SIZE,\n                                address: page_span.base.start_address().data(),\n                                flags,\n                            },\n                            op == ADDRSPACE_OP_TRANSFER,\n                        )?;\n                    }\n                    ADDRSPACE_OP_MUNMAP => {\n                        let page_span = crate::syscall::validate_region(next()??, next()??)?;\n\n                        let unpin = false;\n                        addrspace.munmap(page_span, unpin)?;\n                    }\n                    ADDRSPACE_OP_MPROTECT => {\n                        let page_span = crate::syscall::validate_region(next()??, next()??)?;\n                        let flags = MapFlags::from_bits(next()??).ok_or(Error::new(EINVAL))?;\n\n                        addrspace.mprotect(page_span, flags)?;\n                    }\n                    _ => return Err(Error::new(EINVAL)),\n                }\n                Ok(words_read * mem::size_of::<usize>())\n            }\n            ContextHandle::Regs(kind) => match kind {\n                RegsKind::Float => {\n                    let regs = unsafe { buf.read_exact::<FloatRegisters>()? };\n\n                    try_stop_context(context, |context| {\n                        // NOTE: The kernel will never touch floats\n\n                        // Ignore the rare case of floating point\n                        // registers being uninitiated\n                        let _ = context.set_fx_regs(regs);\n\n                        Ok(mem::size_of::<FloatRegisters>())\n                    })\n                }\n                RegsKind::Int => {\n                    let regs = unsafe { buf.read_exact::<IntRegisters>()? };\n\n                    try_stop_context(context, |context| match context.regs_mut() {\n                        None => {\n                            println!(\n                                "{}:{}: Couldn't read registers from stopped process",\n                                file!(),\n                                line!()\n                            );\n                            Err(Error::new(ENOTRECOVERABLE))\n                        }\n                        Some(stack) => {\n                            stack.load(&regs);\n\n                            Ok(mem::size_of::<IntRegisters>())\n                        }\n                    })\n                }\n                RegsKind::Env => {\n                    let regs = unsafe { buf.read_exact::<EnvRegisters>()? };\n                    write_env_regs(context, regs)?;\n                    Ok(mem::size_of::<EnvRegisters>())\n                }\n            },\n            ContextHandle::Name => {\n                // TODO: What limit?\n                let mut name_buf = [0_u8; 256];\n                let bytes_copied = buf.copy_common_bytes_to_slice(&mut name_buf)?;\n\n                let utf8 = alloc::string::String::from_utf8(name_buf[..bytes_copied].to_vec())\n                    .map_err(|_| Error::new(EINVAL))?;\n                context.write().name = utf8.into();\n                Ok(buf.len())\n            }\n            ContextHandle::Sighandler => {\n                let data = unsafe { buf.read_exact::<SetSighandlerData>()? };\n\n                if data.user_handler >= crate::USER_END_OFFSET\n                    || data.excp_handler >= crate::USER_END_OFFSET\n                {\n                    return Err(Error::new(EPERM));\n                }\n                if data.thread_control_addr >= crate::USER_END_OFFSET\n                    || data.proc_control_addr >= crate::USER_END_OFFSET\n                {\n                    return Err(Error::new(EFAULT));\n                }\n\n                let state = if data.thread_control_addr != 0 && data.proc_control_addr != 0 {\n                    let validate_off = |addr, sz| {\n                        let off = addr % PAGE_SIZE;\n                        if off % mem::align_of::<usize>() == 0 && off + sz <= PAGE_SIZE {\n                            Ok(off as u16)\n                        } else {\n                            Err(Error::new(EINVAL))\n                        }\n                    };\n\n                    let addrsp = Arc::clone(context.read().addr_space()?);\n\n                    Some(SignalState {\n                        threadctl_off: validate_off(\n                            data.thread_control_addr,\n                            mem::size_of::<Sigcontrol>(),\n                        )?,\n                        procctl_off: validate_off(\n                            data.proc_control_addr,\n                            mem::size_of::<SigProcControl>(),\n                        )?,\n                        user_handler: NonZeroUsize::new(data.user_handler)\n                            .ok_or(Error::new(EINVAL))?,\n                        excp_handler: NonZeroUsize::new(data.excp_handler),\n                        thread_control: addrsp.borrow_frame_enforce_rw_allocated(\n                            Page::containing_address(VirtualAddress::new(data.thread_control_addr)),\n                        )?,\n                        proc_control: addrsp.borrow_frame_enforce_rw_allocated(\n                            Page::containing_address(VirtualAddress::new(data.proc_control_addr)),\n                        )?,\n                        rtqs: Vec::new(),\n                    })\n                } else {\n                    None\n                };\n\n                context.write().sig = state;\n\n                Ok(mem::size_of::<SetSighandlerData>())\n            }\n            ContextHandle::Start => match context.write().status {\n                ref mut status @ Status::HardBlocked {\n                    reason: HardBlockedReason::NotYetStarted,\n                } => {\n                    *status = Status::Runnable;\n                    Ok(buf.len())\n                }\n                _ => return Err(Error::new(EINVAL)),\n            },\n            ContextHandle::Filetable { .. } | ContextHandle::NewFiletable { .. } => {\n                Err(Error::new(EBADF))\n            }\n\n            ContextHandle::CurrentFiletable => {\n                let filetable_fd = buf.read_usize()?;\n                let (hopefully_this_scheme, number) = extract_scheme_number(filetable_fd)?;\n                verify_scheme(hopefully_this_scheme)?;\n\n                let mut handles = HANDLES.write();\n                let Entry::Occupied(mut entry) = handles.entry(number) else'
    Line Content:                 let Entry::Occupied(mut entry) = handles.entry(number) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1185
    Column      : 43
    Error       : extraneous input '=>' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             Self::AddrSpace { addrspace } => {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1258
    Column      : 32
    Error       : no viable alternative at input 'Err('
    Line Content:                             Err(Error::new(ENOTRECOVERABLE))
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1576
    Column      : 58
    Error       : no viable alternative at input 'match self {\n            ContextHandle::Regs(kind) => {\n                union Output {\n                    float: FloatRegisters,\n                    int: IntRegisters,\n                    env: EnvRegisters,\n                }\n\n                let (output, size) = match kind {\n                    RegsKind::Float => {\n                        let context = context.read();\n                        // NOTE: The kernel will never touch floats\n\n                        (\n                            Output {\n                                float: context.get_fx_regs(),\n                            },\n                            mem::size_of::<FloatRegisters>(),\n                        )\n                    }\n                    RegsKind::Int => try_stop_context(context, |context| match context.regs() {\n                        None => {\n                            assert!(!context.running, "try_stop_context is broken, clearly");\n                            println!(\n                                "{}:{}: Couldn't read registers from stopped process",\n                                file!(),\n                                line!()\n                            );\n                            Err(Error::new(ENOTRECOVERABLE))\n                        }\n                        Some(stack) => {\n                            let mut regs = IntRegisters::default();\n                            stack.save(&mut regs);\n                            Ok((Output { int: regs }, mem::size_of::<IntRegisters>()))\n                        }\n                    })?,\n                    RegsKind::Env => (\n                        Output {\n                            env: read_env_regs(context)?,\n                        },\n                        mem::size_of::<EnvRegisters>(),\n                    ),\n                };\n\n                let src_buf =\n                    unsafe { slice::from_raw_parts(&output as *const _ as *const u8, size) };\n\n                buf.copy_common_bytes_from_slice(src_buf)\n            }\n            ContextHandle::AddrSpace { ref addrspace } => {\n                let Ok(offset) = usize::try_from(offset) else'
    Line Content:                 let Ok(offset) = usize::try_from(offset) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1534
    Column      : 17
    Error       : extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                 let (output, size) = match kind {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1554
    Column      : 32
    Error       : no viable alternative at input 'Err('
    Line Content:                             Err(Error::new(ENOTRECOVERABLE))
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1571
    Column      : 72
    Error       : mismatched input 'as' expecting ':'
    Line Content:                     unsafe { slice::from_raw_parts(&output as *const _ as *const u8, size) };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/scheme/proc.rs
    Line        : 1571
    Column      : 84
    Error       : mismatched input ',' expecting ':'
    Line Content:                     unsafe { slice::from_raw_parts(&output as *const _ as *const u8, size) };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/acpi/madt/arch/aarch64.rs
    Line        : 32
    Column      : 31
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '::', '?', '[', '('}
    Line Content:     let Some(gicd) = gicd_opt else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/startup/memory.rs
    Line        : 252
    Column      : 21
    Error       : no viable alternative at input 'while other_i < *area_i {\n        let other = &areas[other_i];\n        let other = MemoryEntry {\n            start: other.base.data(),\n            end: other.base.data().saturating_add(other.size),\n            kind: BootloaderMemoryKind::Free,\n        };\n        if let Some(union'
    Line Content:         if let Some(union) = area.combine(&other) {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/startup/memory.rs
    Line        : 252
    Column      : 26
    Error       : mismatched input ')' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
    Line Content:         if let Some(union) = area.combine(&other) {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/startup/memory.rs
    Line        : 252
    Column      : 34
    Error       : mismatched input '.' expecting ':'
    Line Content:         if let Some(union) = area.combine(&other) {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/startup/memory.rs
    Line        : 262
    Column      : 18
    Error       : no viable alternative at input 'area ='
    Line Content:             area = union;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/startup/memory.rs
    Line        : 262
    Column      : 25
    Error       : mismatched input ';' expecting {'macro_rules', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER}
    Line Content:             area = union;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/startup/memory.rs
    Line        : 263
    Column      : 21
    Error       : mismatched input '-=' expecting ':'
    Line Content:             *area_i -= 1; // delete the original memory chunk
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/percpu.rs
    Line        : 93
    Column      : 12
    Error       : no viable alternative at input 'if let Some(target) = target {\n        let my_percpublock = PercpuBlock::current();\n        assert_ne!(target, my_percpublock.cpu_id);\n\n        let Some(percpublock) = (unsafe {\n            ALL_PERCPU_BLOCKS[target.get() as usize]\n                .load(Ordering::Acquire)\n                .as_ref()\n        }) else'
    Line Content:         }) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/percpu.rs
    Line        : 89
    Column      : 9
    Error       : extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         let Some(percpublock) = (unsafe {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/percpu.rs
    Line        : 95
    Column      : 13
    Error       : extraneous input 'return' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             return;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 333
    Column      : 47
    Error       : no viable alternative at input 'for (frame, (count, p)) in tree {\n        let Some(info) = get_page_info(frame) else'
    Line Content:         let Some(info) = get_page_info(frame) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 335
    Column      : 13
    Error       : extraneous input 'continue' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             continue;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 349
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 357
    Column      : 12
    Error       : no viable alternative at input 'unsafe {'
    Line Content:     unsafe {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 480
    Column      : 7
    Error       : no viable alternative at input 'for p4i in 0..256 {\n        let p3 = match p4.next(p4i) {\n            Some(p3) => p3,\n            None => continue,\n        };\n\n        for p3i in 0..512 {\n            let p2 = match p3.next(p3i) {\n                Some(p2) => p2,\n                None => continue,\n            };\n\n            for p2i in 0..512 {\n                let p1 = match p2.next(p2i) {\n                    Some(p1) => p1,\n                    None => continue,\n                };\n\n                for p1i in 0..512 {\n                    let (physaddr, flags) = match p1.entry(p1i) {\n                        Some(e) => {\n                            if let Ok(address) = e.address() {\n                                (address, e.flags())\n                            } else {\n                                continue;\n                            }\n                        }\n                        _ => continue,\n                    };\n                    let address =\n                        VirtualAddress::new((p1i << 12) | (p2i << 21) | (p3i << 30) | (p4i << 39));\n\n                    let (base, grant) = match addr_space\n                        .grants\n                        .contains(Page::containing_address(address))\n                    {\n                        Some(g) => g,\n                        None => {\n                            log::error!(\n                                "ADDRESS {:p} LACKING GRANT BUT MAPPED TO {:#0x} FLAGS {:?}!",\n                                address.data() as *const u8,\n                                physaddr.data(),\n                                flags\n                            );\n                            continue;\n                        }\n                    };\n\n                    const EXCLUDE: usize = (1 << 5) | (1 << 6); // accessed+dirty+writable\n                    if grant.flags().write(false).data() & !EXCLUDE\n                        != flags.write(false).data() & !EXCLUDE\n                    {\n                        log::error!(\n                            "FLAG MISMATCH: {:?} != {:?}, address {:p} in grant at {:?}",\n                            grant.flags(),\n                            flags,\n                            address.data() as *const u8,\n                            PageSpan::new(base, grant.page_count())\n                        );\n                    }\n                    let p = matches!(\n                        grant.provider,\n                        Provider::PhysBorrowed { .. }\n                            | Provider::External { .. }\n                            | Provider::FmapBorrowed { .. }\n                    );\n                    let frame = Frame::containing(physaddr);\n                    if new_as {\n                        tree.entry(frame).or_insert((0, p)).0 += 1;\n                    }\n\n                    if let Some(page) = get_page_info(frame) {\n                        match page.refcount() {\n                            None => panic!("mapped page with zero refcount"),\n\n                            Some(RefCount::One | RefCount::Shared(_)) => assert!(\n                                !(flags.has_write() && !grant.flags().has_write()),\n                                "page entry has higher permissions than grant!"\n                            ),\n                            Some(RefCount::Cow(_)) => {\n                                assert!(!flags.has_write(), "directly writable CoW page!")\n                            }\n                        }\n                    } else {\n                        //println!("!OWNED {:?}", frame);\n                    }\n                }\n            }\n        }\n    }\n\n    /*for (base, info) in addr_space.grants.iter() {\n        let span = PageSpan::new(base, info.page_count());\n        for page in span.pages() {\n            let _entry = match addr_space.table.utable.translate(page.start_address()) {\n                Some(e) => e,\n                None => {\n                    log::error!("GRANT AT {:?} LACKING MAPPING AT PAGE {:p}", span, page.start_address().data() as *const u8);\n                    continue;\n                }\n            };\n        }\n    }*/'
    Line Content:     }*/
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 422
    Column      : 29
    Error       : extraneous input 'continue' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                             continue;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 427
    Column      : 21
    Error       : extraneous input 'if' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                     if grant.flags().write(false).data() & !EXCLUDE
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 437
    Column      : 21
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 444
    Column      : 21
    Error       : extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                     let frame = Frame::containing(physaddr);
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 451
    Column      : 77
    Error       : mismatched input ',' expecting ';'
    Line Content:                             None => panic!("mapped page with zero refcount"),
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 456
    Column      : 30
    Error       : mismatched input ',' expecting ';'
    Line Content:                             ),
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 459
    Column      : 29
    Error       : mismatched input '}' expecting ';'
    Line Content:                             }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 476
    Column      : 21
    Error       : extraneous input 'continue' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                     continue;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/debugger.rs
    Line        : 482
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/mod.rs
    Line        : 100
    Column      : 47
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '?', '[', '(', ')'}
    Line Content:     let Some(soc_node) = dt.find_node("/soc") else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/mod.rs
    Line        : 104
    Column      : 39
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:     let Some(reg) = soc_node.ranges() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/mod.rs
    Line        : 145
    Column      : 5
    Error       : extraneous input '/' expecting {'break', 'const', 'continue', 'crate', 'enum', 'extern', 'false', 'fn', 'for', 'if', 'impl', 'let', 'loop', 'match', 'mod', 'move', 'pub', 'return', 'self', 'Self', 'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe', 'use', 'while', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, CHAR_LITERAL, STRING_LITERAL, RAW_STRING_LITERAL, BYTE_LITERAL, BYTE_STRING_LITERAL, RAW_BYTE_STRING_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL, LIFETIME_OR_LABEL, '-', '*', '!', '&', '|', '&&', '||', '<', '..', '..=', ';', '::', '#', '{', '}', '[', '('}
    Line Content:     /* DT spec 2.3.8 "ranges":
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/mod.rs
    Line        : 145
    Column      : 11
    Error       : missing '}' at 'spec'
    Line Content:     /* DT spec 2.3.8 "ranges":
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/mod.rs
    Line        : 148
    Column      : 12
    Error       : token recognition error at: '’'
    Line Content:      * node’s parent (the parent address space).
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/mod.rs
    Line        : 194
    Column      : 14
    Error       : no viable alternative at input 'match parent_interrupt_cells {\n        1 => Some(IrqCell::L1(intr.next()?)),\n        2 if let'
    Line Content:         2 if let Ok([a, b]) = intr.next_chunk() => Some(IrqCell::L2(a, b)),
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 93
    Column      : 30
    Error       : no viable alternative at input 'for node in fdt.all_nodes() {\n            if node.property("interrupt-controller").is_some() {\n                let compatible = node.property("compatible").unwrap().as_str().unwrap();\n                let phandle = node.property("phandle").unwrap().as_usize().unwrap() as u32;\n                let intr_cells = node.interrupt_cells().unwrap();\n\n                debug!(\n                    "{}, compatible = {}, #interrupt-cells = 0x{:08x}, phandle = 0x{:08x}",\n                    node.name, compatible, intr_cells, phandle\n                );\n                let mut item = IrqChipItem {\n                    phandle,\n                    parents: Vec::new(),\n                    children: Vec::new(),\n                    ic: new_irqchip(compatible).unwrap(),\n                };\n\n                fn interrupt_address(\n                    iter: &mut impl Iterator<Item = u32>,\n                    interrupt_cells: usize,\n                ) -> Option<IrqCell> {\n                    match interrupt_cells {\n                        1 => Some(IrqCell::L1(iter.next()?)),\n                        2 if let'
    Line Content:                         2 if let Ok([a, b]) = iter.next_chunk() => Some(IrqCell::L2(a, b)),
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 80
    Column      : 17
    Error       : extraneous input 'let' expecting {'const', 'crate', 'extern', 'fn', 'pub', 'self', 'super', 'type', 'unsafe', 'async', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
    Line Content:                 let mut item = IrqChipItem {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 85
    Column      : 18
    Error       : extraneous input ';' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                 };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 93
    Column      : 30
    Error       : no viable alternative at input 'match interrupt_cells {\n                        1 => Some(IrqCell::L1(iter.next()?)),\n                        2 if let'
    Line Content:                         2 if let Ok([a, b]) = iter.next_chunk() => Some(IrqCell::L2(a, b)),
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 108
    Column      : 17
    Error       : extraneous input 'if' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                 if let Some(parent) = node.interrupt_parent()
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 120
    Column      : 21
    Error       : extraneous input 'while' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                     while let Some(parent_interrupt) =
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 124
    Column      : 29
    Error       : no viable alternative at input 'item.'
    Line Content:                         item.parents.push(IrqConnection {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 131
    Column      : 17
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                 } else if let Some(intr_data) = node.property("interrupts-extended") {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 143
    Column      : 29
    Error       : no viable alternative at input 'item.'
    Line Content:                         item.parents.push(IrqConnection {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/dtb/irqchip.rs
    Line        : 238
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 82
    Column      : 5
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', '::', '?', '[', '(', ')'}
    Line Content:     else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 164
    Column      : 54
    Error       : no viable alternative at input 'for merge_order in order..MAX_ORDER {\n        // Because there's a PageInfo, this frame must be allocator-owned. We need to be very\n        // careful with who owns this page, as the refcount can be anything from 0 (undefined) to\n        // 2^addrwidth - 1. However, allocation and deallocation must be synchronized (the "next"\n        // word of the PageInfo).\n\n        let sibling = Frame::containing(PhysicalAddress::new(\n            current.base().data() ^ (PAGE_SIZE << merge_order),\n        ));\n\n        let Some(_cur_info) = get_page_info(current) else'
    Line Content:         let Some(_cur_info) = get_page_info(current) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 166
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 190
    Column      : 9
    Error       : extraneous input 'if' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         if let Some(sib_prev) = sib_info.prev().frame() {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 199
    Column      : 21
    Error       : no viable alternative at input 'freelist.'
    Line Content:             freelist.for_orders[merge_order as usize] = sib_info.next().frame();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 218
    Column      : 5
    Error       : extraneous input 'if' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     if let Some(old_head) = freelist.for_orders[largest_order as usize].replace(new_head) {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 734
    Column      : 45
    Error       : no viable alternative at input 'for (order, tuple_opt) in last_pages.iter().enumerate() {\n        let Some((frame, info)) = tuple_opt else'
    Line Content:         let Some((frame, info)) = tuple_opt else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 738
    Column      : 9
    Error       : extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         let free = info.as_free().unwrap();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 740
    Column      : 13
    Error       : no viable alternative at input 'free.'
    Line Content:         free.set_next(P2Frame::new(None, order as u32));
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 747
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/memory/mod.rs
    Line        : 948
    Column      : 6
    Error       : no viable alternative at input 'section.frames.get(frame.offset_from(section.base))\n\n    /*\n    sections\n        .range(..=frame)\n        .next_back()\n        .filter(|(base, section)| frame <= base.next_by(section.frames.len()))\n        .map(|(base, section)| PageInfoHandle { section, idx: frame.offset_from(*base) })\n    */'
    Line Content:     */
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/profiling.rs
    Line        : 122
    Column      : 9
    Error       : no viable alternative at input 'unsafe {\n        let Some(src) = BUFS\n            .get(cpu_num.get() as usize)\n            .ok_or(Error::new(EBADFD))?\n            .load(Ordering::Relaxed)\n            .as_ref()\n        else'
    Line Content:         else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/profiling.rs
    Line        : 147
    Column      : 75
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:     let Some(profiling) = crate::percpu::PercpuBlock::current().profiling else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/riscv64/interrupt/handler.rs
    Line        : 98
    Column      : 15
    Error       : no viable alternative at input 'const {'
    Line Content:         const {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/riscv64/device/mod.rs
    Line        : 31
    Column      : 12
    Error       : no viable alternative at input 'if string_property(prop.name)\n        && let'
    Line Content:         && let Some(str) = prop.as_str()
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/riscv64/device/mod.rs
    Line        : 34
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     } else if let Some(value) = prop.as_usize() {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/riscv64/device/mod.rs
    Line        : 36
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     } else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/riscv64/device/mod.rs
    Line        : 39
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/riscv64/device/mod.rs
    Line        : 41
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 67
    Column      : 12
    Error       : no viable alternative at input 'if cfg!(not(cpu_feature_never = "fsgsbase"))\n        && let'
    Line Content:         && let Some(f) = cpuid().get_extended_feature_info()
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 67
    Column      : 9
    Error       : mismatched input '&&' expecting ';'
    Line Content:         && let Some(f) = cpuid().get_extended_feature_info()
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 77
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 80
    Column      : 5
    Error       : extraneous input 'if' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     if feature_info().has_xsave() {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 83
    Column      : 36
    Error       : no viable alternative at input 'x86::controlregs::cr4_write('
    Line Content:         x86::controlregs::cr4_write(
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 111
    Column      : 17
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                 }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 119
    Column      : 26
    Error       : no viable alternative at input 'xsave::XSAVE_INFO.'
    Line Content:         xsave::XSAVE_INFO.call_once(|| info);
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 122
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 129
    Column      : 14
    Error       : no viable alternative at input 'overwrite('
    Line Content:     overwrite(&relocs, enable);
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 132
    Column      : 5
    Error       : extraneous input 'let' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     let _ = relocs;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 134
    Column      : 46
    Error       : mismatched input '{' expecting ';'
    Line Content:     if cfg!(not(feature = "self_modifying")) {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/x86_64/alternative.rs
    Line        : 141
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/aarch64/interrupt/irq.rs
    Line        : 48
    Column      : 1
    Error       : extraneous input '/' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: /*
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/aarch64/interrupt/irq.rs
    Line        : 62
    Column      : 1
    Error       : extraneous input '*' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: */
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/aarch64/device/irqchip/gicv3.rs
    Line        : 35
    Column      : 63
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '?', '[', ']', '('}
    Line Content:         let Some(node) = fdt.find_compatible(&["arm,gic-v3"]) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/aarch64/device/irqchip/gicv3.rs
    Line        : 53
    Column      : 16
    Error       : no viable alternative at input 'if let Some(gicd) = chunks.next()\n            && let'
    Line Content:             && let Some(addr) = get_mmio_address(fdt, &node, &gicd)
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/aarch64/device/irqchip/gicv3.rs
    Line        : 55
    Column      : 20
    Error       : mismatched input '{' expecting {'extern', 'fn'}
    Line Content:             unsafe {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/arch/aarch64/device/irqchip/gicv3.rs
    Line        : 58
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/context.rs
    Line        : 425
    Column      : 44
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:         let Some(ref kstack) = self.kstack else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/context.rs
    Line        : 434
    Column      : 48
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:         let Some(ref mut kstack) = self.kstack else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/context.rs
    Line        : 511
    Column      : 5
    Error       : extraneous input '/' expecting {'const', 'crate', 'extern', 'fn', 'pub', 'self', 'super', 'type', 'unsafe', 'async', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
    Line Content:     /*
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/context.rs
    Line        : 530
    Column      : 5
    Error       : extraneous input '*' expecting {'const', 'crate', 'extern', 'fn', 'pub', 'self', 'super', 'type', 'unsafe', 'async', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
    Line Content:     */
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/context.rs
    Line        : 536
    Column      : 45
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:         let Some(inner) = self.inner.take() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 59
    Column      : 9
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:         else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1188
    Column      : 17
    Error       : no viable alternative at input 'for (i, page) in span.pages().enumerate().take(MAX_EAGER_PAGES) {\n            let frame = phys.next_by(i);\n            unsafe {\n                let Some(result) =\n                    mapper.map_phys(page.start_address(), frame.base(), flags.write(false))\n                else'
    Line Content:                 else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1185
    Column      : 20
    Error       : mismatched input '{' expecting {'extern', 'fn'}
    Line Content:             unsafe {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1190
    Column      : 18
    Error       : extraneous input ';' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                 };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1274
    Column      : 17
    Error       : no viable alternative at input 'for page in span.pages().take(MAX_EAGER_PAGES) {\n            // Good thing with lazy page fault handlers, is that if we fail due to ENOMEM here, we\n            // can continue and let the process face the OOM killer later.\n            unsafe {\n                the_frame_info\n                    .add_ref(RefKind::Cow)\n                    .expect("the static zeroed frame cannot be shared!");\n\n                let Some(result) =\n                    mapper.map_phys(page.start_address(), the_frame.base(), flags.write(false))\n                else'
    Line Content:                 else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1540
    Column      : 41
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '::', '?', '[', '('}
    Line Content:         let Some(last_span) = prev_span else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1559
    Column      : 17
    Error       : no viable alternative at input 'if eager {\n            for (i, page) in PageSpan::new(src_base, page_count)\n                .pages()\n                .enumerate()\n                .take(MAX_EAGER_PAGES)\n            {\n                let Some((phys, _)) = src_address_space\n                    .table\n                    .utable\n                    .translate(page.start_address())\n                else'
    Line Content:                 else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1632
    Column      : 24
    Error       : no viable alternative at input 'for page_idx in 0..page_count {\n            let src_page = src_base.next_by(page_idx);\n            let dst_page = dst_base.next_by(page_idx).start_address();\n\n            let src_frame = match rk {\n                RefKind::Cow => {\n                    let Some((_, phys, flush)) = (unsafe {\n                        src_mapper.remap_with(src_page.start_address(), |flags| flags.write(false))\n                    }) else'
    Line Content:                     }) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1783
    Column      : 13
    Error       : no viable alternative at input 'for src_page in self.span().pages() {\n            let dst_page = dst_base.next_by(src_page.offset_from(self.base));\n\n            let unmap_parents = true;\n\n            // TODO: Validate flags?\n            let Some((phys, _flags, flush)) =\n                (unsafe { src_mapper.unmap_phys(src_page.start_address(), unmap_parents) })\n            else'
    Line Content:             else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1827
    Column      : 17
    Error       : no viable alternative at input 'for page in self.span().pages() {\n            unsafe {\n                // Lazy mappings don't require remapping, as info.flags will be updated.\n                let Some((old_flags, phys, flush)) =\n                    mapper.remap_with(page.start_address(), |_| flags)\n                else'
    Line Content:                 else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1919
    Column      : 17
    Error       : no viable alternative at input 'if is_phys_contiguous {\n            let (phys_base, _) = mapper.translate(self.base.start_address()).unwrap();\n            let base_frame = Frame::containing(phys_base);\n\n            for i in 0..self.info.page_count {\n                unsafe {\n                    let (phys, _, flush) = mapper\n                        .unmap_phys(self.base.next_by(i).start_address(), true)\n                        .expect("all physborrowed grants must be fully Present in the page tables");\n                    flush.ignore();\n\n                    assert_eq!(phys, base_frame.next_by(i).base());\n                }\n            }\n\n            flusher.queue(\n                base_frame,\n                Some(NonZeroUsize::new(self.info.page_count).unwrap()),\n                TlbShootdownActions::FREE,\n            );\n        } else {\n            for page in self.span().pages() {\n                // Lazy mappings do not need to be unmapped.\n                let Some((phys, _, flush)) =\n                    (unsafe { mapper.unmap_phys(page.start_address(), true) })\n                else'
    Line Content:                 else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 1906
    Column      : 17
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:                 }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2087
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2384
    Column      : 52
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:     let Ok(addr_space_lock) = AddrSpace::current() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2406
    Column      : 84
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
    Line Content:     let Some((grant_base, grant_info)) = addr_space.grants.contains(faulting_page) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2661
    Column      : 8
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '::', '?', '[', '(', ')'}
    Line Content:     }) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2733
    Column      : 46
    Error       : no viable alternative at input 'if let Some(count) = phys_contiguous_count {\n        for i in 0..count.get() {\n            let new_rc = get_page_info(base.next_by(i))\n                .expect("phys_contiguous frames all need PageInfos")\n                .remove_ref();\n\n            assert_eq!(new_rc, None);\n        }\n        unsafe {\n            let order = count.get().next_power_of_two().trailing_zeros();\n            deallocate_p2frame(base, order);\n        }\n    } else {\n        let Some(info) = get_page_info(base) else'
    Line Content:         let Some(info) = get_page_info(base) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2727
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2827
    Column      : 13
    Error       : no viable alternative at input 'for entry in pages {\n            let PageQueueEntry::Free {\n                base,\n                phys_contiguous_count,\n            } = entry\n            else'
    Line Content:             else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/memory.rs
    Line        : 2826
    Column      : 15
    Error       : extraneous input '=' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             } = entry
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/signal.rs
    Line        : 28
    Column      : 65
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:     let Some((thread_ctl, proc_ctl, st)) = context.sigcontrol() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/signal.rs
    Line        : 54
    Column      : 41
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:     let Some(regs) = context.regs_mut() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/context/signal.rs
    Line        : 81
    Column      : 71
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '?', '[', '(', ')'}
    Line Content:     let Some(_eh) = context.sig.as_ref().and_then(|s| s.excp_handler) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/syscall/process.rs
    Line        : 256
    Column      : 16
    Error       : no viable alternative at input '(|| {\n        let is_self = context::is_current(&context_lock);\n\n        // If sig = 0, test that process exists and can be signalled, but don't send any\n        // signal.\n        if sig == 0 {\n            return SendResult::Succeeded;\n        }\n\n        let mut process_guard = process_lock.write();\n\n        if sig == SIGCONT\n            && let'
    Line Content:             && let ProcessStatus::Stopped(_sig) = process_guard.status
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/syscall/process.rs
    Line        : 301
    Column      : 17
    Error       : mismatched input '&&' expecting ';'
    Line Content:                 && context_guard
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/syscall/process.rs
    Line        : 890
    Column      : 56
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:     let Some((_tctl, pctl, st)) = current.sigcontrol() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/syscall/process.rs
    Line        : 900
    Column      : 37
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ';', '?', '[', '('}
    Line Content:     let Some(front) = q.pop_front() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/common/aligned_box.rs
    Line        : 28
    Column      : 84
    Error       : mismatched input 'else' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', ',', '?', '[', '(', ')'}
    Line Content:     let Ok(x) = Layout::from_size_align(layout.size(), max(align, layout.align())) else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/kernel/src/cpu_stats.rs
    Line        : 10
    Column      : 39
    Error       : extraneous input 'const' expecting {'break', 'continue', 'crate', 'false', 'for', 'if', 'loop', 'match', 'move', 'return', 'self', 'Self', 'super', 'true', 'unsafe', 'while', 'async', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, CHAR_LITERAL, STRING_LITERAL, RAW_STRING_LITERAL, BYTE_LITERAL, BYTE_STRING_LITERAL, RAW_BYTE_STRING_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL, LIFETIME_OR_LABEL, '-', '*', '!', '&', '|', '&&', '||', '<', '..', '..=', '::', '#', '{', '[', ']', '('}
    Line Content: static IRQ_COUNT: [AtomicU64; 256] = [const { AtomicU64::new(0) }; 256];
