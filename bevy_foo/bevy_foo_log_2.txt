Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1080
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1083
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1088
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1091
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1096
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1099
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1102
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1105
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1108
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1111
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1116
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1119
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1124
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1127
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1132
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1135
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1146
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1149
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1152
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_slice.rs
    Line        : 1155
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/picking_backend.rs
    Line        : 198
    Column      : 70
    Error       : no viable alternative at input 'for (pointer, location) in pointers.iter().filter_map(|(pointer, pointer_location)| {\n        pointer_location.location().map(|loc| (pointer, loc))\n    }) {\n        let mut blocked = false;\n        let Some((cam_entity, camera, cam_transform, Projection::Orthographic(cam_ortho), _)) =\n            cameras\n                .iter()\n                .filter(|(_, camera, _, _, cam_can_pick)| {\n                    let marker_requirement = !settings.require_markers || *cam_can_pick;\n                    camera.is_active && marker_requirement\n                })\n                .find(|(_, camera, _, _, _)| {\n                    camera\n                        .target\n                        .normalize(primary_window)\n                        .is_some_and(|x| x == location.target)\n                })\n        else {\n            continue;\n        };\n\n        let viewport_pos = camera\n            .logical_viewport_rect()\n            .map(|v| v.min)\n            .unwrap_or_default();\n        let pos_in_viewport = location.position - viewport_pos;\n\n        let Ok(cursor_ray_world) = camera.viewport_to_world(cam_transform, pos_in_viewport) else {\n            continue;\n        };\n        let cursor_ray_len = cam_ortho.far - cam_ortho.near;\n        let cursor_ray_end = cursor_ray_world.origin + cursor_ray_world.direction * cursor_ray_len;\n\n        let picks: Vec<(Entity, HitData)> = sorted_sprites\n            .iter()\n            .copied()\n            .filter_map(|(entity, sprite, sprite_transform, pickable)| {\n                if blocked {\n                    return None;\n                }\n\n                // Transform cursor line segment to sprite coordinate system\n                let world_to_sprite = sprite_transform.affine().inverse();\n                let cursor_start_sprite = world_to_sprite.transform_point3(cursor_ray_world.origin);\n                let cursor_end_sprite = world_to_sprite.transform_point3(cursor_ray_end);\n\n                // Find where the cursor segment intersects the plane Z=0 (which is the sprite's\n                // plane in sprite-local space). It may not intersect if, for example, we're\n                // viewing the sprite side-on\n                if cursor_start_sprite.z == cursor_end_sprite.z {\n                    // Cursor ray is parallel to the sprite and misses it\n                    return None;\n                }\n                let lerp_factor =\n                    f32::inverse_lerp(cursor_start_sprite.z, cursor_end_sprite.z, 0.0);\n                if !(0.0..=1.0).contains(&lerp_factor) {\n                    // Lerp factor is out of range, meaning that while an infinite line cast by\n                    // the cursor would intersect the sprite, the sprite is not between the\n                    // camera's near and far planes\n                    return None;\n                }\n                // Otherwise we can interpolate the xy of the start and end positions by the\n                // lerp factor to get the cursor position in sprite space!\n                let cursor_pos_sprite = cursor_start_sprite\n                    .lerp(cursor_end_sprite, lerp_factor)\n                    .xy();\n\n                let Ok(cursor_pixel_space) = sprite.compute_pixel_space_point(\n                    cursor_pos_sprite,\n                    &images,\n                    &texture_atlas_layout,\n                ) else {\n                    return None;\n                };\n\n                // Since the pixel space coordinate is `Ok`, we know the cursor is in the bounds of\n                // the sprite.\n\n                let cursor_in_valid_pixels_of_sprite = 'valid_pixel: {'
    Line Content:                 let cursor_in_valid_pixels_of_sprite = 'valid_pixel: {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/button.rs
    Line        : 60
    Column      : 56
    Error       : mismatched input 'use' expecting {'where', ';', '{'}
    Line Content: fn button(asset_server: &AssetServer) -> impl Bundle + use<> {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/button.rs
    Line        : 60
    Column      : 59
    Error       : mismatched input '<' expecting {'crate', 'self', 'super', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '*', '::', '{'}
    Line Content: fn button(asset_server: &AssetServer) -> impl Bundle + use<> {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/button.rs
    Line        : 94
    Column      : 11
    Error       : mismatched input ',' expecting ';'
    Line Content:         )],
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/generics.rs
    Line        : 322
    Column      : 58
    Error       : no viable alternative at input 'struct Test<T, U: Debug = String, const N: usize ='
    Line Content:         struct Test<T, U: Debug = String, const N: usize = 10>([(T, U); N]);
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/generics.rs
    Line        : 322
    Column      : 22
    Error       : no viable alternative at input 'T,'
    Line Content:         struct Test<T, U: Debug = String, const N: usize = 10>([(T, U); N]);
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/generics.rs
    Line        : 324
    Column      : 9
    Error       : extraneous input 'let' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
    Line Content:         let generics = <Test<f32> as Typed>::type_info()
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/generics.rs
    Line        : 331
    Column      : 10
    Error       : extraneous input ';' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/generics.rs
    Line        : 334
    Column      : 9
    Error       : extraneous input 'let' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         let GenericInfo::Const(n) = generics.get_named("N").unwrap() else {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/generics.rs
    Line        : 336
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         };
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/generics.rs
    Line        : 338
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 518
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&[U]) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 521
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 526
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 529
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 532
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut [U]) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 535
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 540
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 543
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 548
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&[U; N]) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 551
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 556
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntityArray<U, N>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 559
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 564
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut [U; N]) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 567
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 572
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntityArray<U, N>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_vec.rs
    Line        : 575
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/wasm.rs
    Line        : 16
    Column      : 5
    Error       : extraneous input 'type' expecting {'const', 'crate', 'extern', 'fn', 'pub', 'self', 'static', 'super', 'unsafe', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
    Line Content:     type Global;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/wasm.rs
    Line        : 16
    Column      : 16
    Error       : no viable alternative at input 'Global;'
    Line Content:     type Global;
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/multi_asset_sync.rs
    Line        : 108
    Column      : 70
    Error       : mismatched input 'use' expecting {'where', ';', '{'}
    Line Content:     pub fn wait_async(&self) -> impl Future<Output = ()> + 'static + use<> {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/multi_asset_sync.rs
    Line        : 108
    Column      : 73
    Error       : mismatched input '<' expecting {'crate', 'self', 'super', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '*', '::', '{'}
    Line Content:     pub fn wait_async(&self) -> impl Future<Output = ()> + 'static + use<> {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/multi_asset_sync.rs
    Line        : 110
    Column      : 15
    Error       : mismatched input 'move' expecting {'extern', 'fn', 'unsafe'}
    Line Content:         async move {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 473
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntitySlice<U>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 476
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 489
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntityArray<U, N>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 492
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 496
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&UniqueEntityArray<U, N>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 499
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 504
    Column      : 25
    Error       : no viable alternative at input '&self, other: &&'
    Line Content:     fn eq(&self, other: &&mut UniqueEntityArray<U, N>) -> bool {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/unique_array.rs
    Line        : 507
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2694
    Column      : 13
    Error       : no viable alternative at input '{\n            let mut query = world.query::<&A>();\n            let mut iter = query.iter(&world);\n            println!(\n                "archetype_entities: {} table_entities: {} current_len: {} current_row: {}",\n                iter.cursor.archetype_entities.len(),\n                iter.cursor.table_entities.len(),\n                iter.cursor.current_len,\n                iter.cursor.current_row\n            );\n            _'
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2694
    Column      : 13
    Error       : extraneous input '_' expecting {'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#', '}'}
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2704
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2724
    Column      : 13
    Error       : no viable alternative at input '{\n            let mut query = world.query::<&Sparse>();\n            let mut iter = query.iter(&world);\n            println!(\n                "before_next_call: archetype_entities: {} table_entities: {} current_len: {} current_row: {}",\n                iter.cursor.archetype_entities.len(),\n                iter.cursor.table_entities.len(),\n                iter.cursor.current_len,\n                iter.cursor.current_row\n            );\n            _'
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2724
    Column      : 13
    Error       : extraneous input '_' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2733
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2749
    Column      : 13
    Error       : no viable alternative at input '{\n            let mut query = world.query::<(&A, &Sparse)>();\n            let mut iter = query.iter(&world);\n            println!(\n                "before_next_call: archetype_entities: {} table_entities: {} current_len: {} current_row: {}",\n                iter.cursor.archetype_entities.len(),\n                iter.cursor.table_entities.len(),\n                iter.cursor.current_len,\n                iter.cursor.current_row\n            );\n            _'
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2749
    Column      : 13
    Error       : extraneous input '_' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2758
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2778
    Column      : 13
    Error       : no viable alternative at input '{\n            let mut query = world.query::<(&A, &Sparse)>();\n            let mut iter = query.iter(&world);\n            println!(\n                "before_next_call: archetype_entities: {} table_entities: {} current_len: {} current_row: {}",\n                iter.cursor.archetype_entities.len(),\n                iter.cursor.table_entities.len(),\n                iter.cursor.current_len,\n                iter.cursor.current_row\n            );\n            assert!(iter.cursor.table_entities.len() | iter.cursor.archetype_entities.len() == 0);\n            _'
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2778
    Column      : 13
    Error       : extraneous input '_' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:             _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2792
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2881
    Column      : 9
    Error       : mismatched input '_' expecting {'break', 'const', 'continue', 'crate', 'enum', 'extern', 'false', 'fn', 'for', 'if', 'impl', 'let', 'loop', 'match', 'mod', 'move', 'pub', 'return', 'self', 'Self', 'static', 'struct', 'super', 'trait', 'true', 'type', 'unsafe', 'use', 'while', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, CHAR_LITERAL, STRING_LITERAL, RAW_STRING_LITERAL, BYTE_LITERAL, BYTE_STRING_LITERAL, RAW_BYTE_STRING_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL, LIFETIME_OR_LABEL, '-', '*', '!', '&', '|', '&&', '||', '<', '..', '..=', ';', '::', '#', '{', '}', '[', '('}
    Line Content:         _ = iter.next();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/iter.rs
    Line        : 2945
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_ref.rs
    Line        : 5889
    Column      : 45
    Error       : missing '}' at 'const'
    Line Content:         let archetype_pointer_before = &raw const *entity.archetype();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_ref.rs
    Line        : 5893
    Column      : 15
    Error       : no viable alternative at input 'entity.'
    Line Content:         entity.modify_component(|foo: &mut Foo| {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_ref.rs
    Line        : 5896
    Column      : 10
    Error       : extraneous input ')' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         });
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_ref.rs
    Line        : 5908
    Column      : 5
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:     }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_ref.rs
    Line        : 5947
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/bind_group_entries.rs
    Line        : 95
    Column      : 48
    Error       : no viable alternative at input 'struct BindGroupEntries<'b, const N: usize ='
    Line Content: pub struct BindGroupEntries<'b, const N: usize = 1> {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/bind_group_entries.rs
    Line        : 96
    Column      : 12
    Error       : mismatched input ':' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', '::', '?', '}', '[', '('}
    Line Content:     entries: [BindGroupEntry<'b>; N],
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/bind_group_entries.rs
    Line        : 96
    Column      : 32
    Error       : mismatched input '>' expecting ':'
    Line Content:     entries: [BindGroupEntry<'b>; N],
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/bind_group_entries.rs
    Line        : 96
    Column      : 36
    Error       : no viable alternative at input 'N]'
    Line Content:     entries: [BindGroupEntry<'b>; N],
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/fragmentation.rs
    Line        : 10
    Column      : 29
    Error       : no viable alternative at input 'struct Table<const X: usize ='
    Line Content: struct Table<const X: usize = 0>(usize);
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/fragmentation.rs
    Line        : 13
    Column      : 30
    Error       : no viable alternative at input 'struct Sparse<const X: usize ='
    Line Content: struct Sparse<const X: usize = 0>(usize);
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_disabling.rs
    Line        : 178
    Column      : 72
    Error       : mismatched input 'use' expecting {'where', ';', '{'}
    Line Content:     pub fn disabling_ids(&self) -> impl Iterator<Item = ComponentId> + use<'_> {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_disabling.rs
    Line        : 178
    Column      : 75
    Error       : mismatched input '<' expecting {'crate', 'self', 'super', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '*', '::', '{'}
    Line Content:     pub fn disabling_ids(&self) -> impl Iterator<Item = ComponentId> + use<'_> {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/entity_disabling.rs
    Line        : 198
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/deferred_world.rs
    Line        : 109
    Column      : 30
    Error       : missing '}' at 'const'
    Line Content:         let archetype = &raw const *entity_cell.archetype();
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/deferred_world.rs
    Line        : 116
    Column      : 16
    Error       : mismatched input '{' expecting {'as', '+', '-', '*', '/', '%', '^', '&', '|', '&&', '||', '+=', '-=', '*=', '/=', '%=', '^=', '&=', '|=', '<<=', '>>=', '=', '==', '!=', '>', '<', '>=', '<=', '.', '..', '..=', '::', '?', '}', '[', '('}
    Line Content:         unsafe {
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/deferred_world.rs
    Line        : 132
    Column      : 9
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content:         }
Rust Parse Error:
    File Path   : /home/socub/U/tesis/rust_repos/bevy_foo/deferred_world.rs
    Line        : 732
    Column      : 1
    Error       : extraneous input '}' expecting {<EOF>, 'const', 'crate', 'enum', 'extern', 'fn', 'impl', 'mod', 'pub', 'self', 'static', 'struct', 'super', 'trait', 'type', 'unsafe', 'use', 'async', 'union', 'macro_rules', '$crate', NON_KEYWORD_IDENTIFIER, RAW_IDENTIFIER, '::', '#'}
    Line Content: }
